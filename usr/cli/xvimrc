" vim
"" Highlight searches
set hlsearch
nnoremap <F3> :nohlsearch<CR>
"" Show line number
set number
"" indent
"set smartindent " not good, indentation in empty line cannot be auto removed
""" show existing tab with 4 spaces width
set tabstop=4
""" when indenting with '>', use 4 spaces width
set shiftwidth=4
""" On pressing tab, insert 4 spaces
set expandtab
""" line wrap with ident
set breakindent
"""" horizontally scroll 4 characters
nnoremap z<left> 4zh
nnoremap z<right> 4zl
"" tags support, ';' means upward search, refering to http://vimdoc.sourceforge.net/htmldoc/editing.html#file-searching
set tags=./tags;
"" Fold
set foldmethod=syntax
""" Set the foldlevel to a high setting,
""" files are always loaded with opened folds.
set foldlevel=20
""" mouse support " select by pressing shift key!
set mouse=a
""" matchit.vim " :h matchit-install
packadd! matchit
"" Preview
nnoremap <leader>[ :pc<CR>
"" highlight unwanted whitespace
set list
set listchars=tab:>-,trail:-
"" syntax
syntax on
"" backspace
set backspace=indent,eol,start
"" wrap line
""" https://stackoverflow.com/questions/248102/is-there-any-command-to-toggle-enable-auto-text-wrapping
:function ToggleWrap()
: if (&wrap == 1)
:   set nowrap
: else
:   set wrap
: endif
:endfunction
nnoremap <F9> :call ToggleWrap()<CR>
set updatetime=400

" vim-mark
"" clear highlight created by vim-mark
nnoremap <leader><F3> :MarkClear<CR>
"" show all marks
nnoremap <leader>M :Marks<CR>

" ALE
"nnoremap <F12> :ALEGoToDefinition<CR>
"nnoremap <S-F12> :ALEFindReferences<CR>
"nnoremap <leader>] :ALEHover<CR>
"nnoremap <leader>f :ALEFix<CR>
"let g:ale_completion_enabled = 1
"" Assign Fixers
"let g:ale_fixers = {
"        \ '*': ['remove_trailing_lines', 'trim_whitespace'],
"        \}
""" add linter to ALE echo msg
"let g:ale_echo_msg_format = '[%linter%]: %code: %%s'

" gitgutter
let g:gitgutter_signs = 1
let g:gitgutter_highlight_lines = 1
nnoremap <Leader>g :GitGutterLineHighlightsToggle<CR>:GitGutterSignsToggle<CR>

augroup filetype
    " detect LLVM IR file
    au! BufRead,BufNewFile *.ll     set filetype=llvm
augroup END

" cscope
" inspired by https://linux-kernel-labs.github.io/refs/heads/master/labs/introduction.html
if has("cscope")
    " Look for a 'cscope.out' file starting from the current directory,
    " going up to the root directory.
    let s:dirs = split(getcwd(), "/")
    while s:dirs != []
        let s:path = "/" . join(s:dirs, "/")
        if (filereadable(s:path . "/cscope.out"))
            execute "cs add " . s:path . "/cscope.out " . s:path . " -v"
            break
        endif
        let s:dirs = s:dirs[:-2]
    endwhile

    set csto=0  " Use cscope first, then ctags
    set cst     " Only search cscope
    set csverb  " Make cs verbose

    " 0 symbol
    nmap <C-\>s :cs find s <C-R><C-W><CR>
    nmap <C-\>S :cs find s<Space>
    " 1 definition
    nmap <C-\>g :cs find g <C-R><C-W><CR>
    nmap <C-\>G :cs find g<Space>
    " 2 called func
    nmap <C-\>d :cs find d <C-R><C-W><CR>
    nmap <C-\>D :cs find d<Space>
    " 3 calling func
    nmap <C-\>c :cs find c <C-R><C-W><CR>
    nmap <C-\>C :cs find c<Space>
    " 4 text string
    nmap <C-\>t :cs find t <C-R><C-W><CR>
    nmap <C-\>T :cs find t<Space>
    " 6 egrep pattern
    nmap <C-\>e :cs find e <C-R><C-W><CR>
    nmap <C-\>E :cs find e<Space>
    " 7 file
    nmap <C-\>F :cs find f<Space>
    " 8 including file
    nmap <C-\>i :cs find i ^<C-R><C-F>$<CR>
    nmap <C-\>I :cs find i<Space>
    " 9 assign
    nmap <C-\>a :cs find a <C-R><C-W><CR>
    nmap <C-\>A :cs find a<Space>

    " Open a quickfix window for the following queries.
    "set cscopequickfix=s-,c-,d-,i-,t-,e-,g-
    "nmap <F6> :cnext <CR>
    "nmap <F5> :cprev <CR>
endif

" git-messenger
"" popup window no close automatically
let g:git_messenger_close_on_cursor_moved=v:false

" vim-floaterm
nmap <Leader>t :FloatermNew --cwd=<buffer><CR>
" let g:floaterm_keymap_new = '<Leader>t'
let g:floaterm_width = 0.8
let g:floaterm_height = 0.8

" vista.vim
let g:vista_update_on_text_changed = 1
let g:vista_default_executive = 'coc'

" set terminal title
"" https://stackoverflow.com/questions/15123477/tmux-tabs-with-name-of-file-open-in-vim
autocmd BufEnter * let &titlestring = '' . expand("%:t")
set title

nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" coc
"" TextEdit might fail if hidden is not set.
set hidden
"" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup
"" Give more space for displaying messages.
""set cmdheight=2
"" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
"" Always show the signcolumn, otherwise it would shift the text each time
"" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
"" Use tab for trigger completion with characters ahead and navigate.
"" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
"" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
"" Make <CR> auto-select the first completion item and notify coc.nvim to
"" format on enter, <cr> could be remapped by other vim plugin
""" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
"""                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
"" Use `[g` and `]g` to navigate diagnostics
"" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
"" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
"" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
"" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')
"" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
"" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end
"" Applying codeAction to the selected region.
"" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
"" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
"" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
"" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)
"" Map function and class text objects
"" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)
"" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif
"" Use CTRL-S for selections ranges.
"" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)
"" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')
"" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
"" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')
"" Add (Neo)Vim's native statusline support.
"" NOTE: Please see `:h coc-status` for integrations with external plugins that
"" provide custom statusline: lightline.vim, vim-airline.
""set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"" Mappings for CoCList
"" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" vim-markdown
let g:vim_markdown_new_list_item_indent = 2
