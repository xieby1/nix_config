MACHINE=$(uname -m)
KERNEL_RELEASE=$(uname -r)

# rewrite prompt format
u_green="\[\033[01;32m\]"
u_blue="\[\033[01;34m\]"
u_white="\[\033[00m\]"
PS1="${debian_chroot:+($debian_chroot)}"
case "${HOSTNAME}" in
qemu*)
    PS1+="(qemu)"
;;
esac
if [[ $MACHINE == aarch64 ]]
then
PS1+="${u_green}\u${u_white}:"
else
PS1+="${u_green}\u@\h${u_white}:"
fi
PS1+="${u_blue}\w${u_white}"
PS1+="\n${u_green}\$${u_white} "
unset u_green u_blue u_white

# change title
# https://unix.stackexchange.com/questions/177572/
PS1+="\[\e]2;\w\a\]"

# FZF top-down display
export FZF_DEFAULT_OPTS="--reverse"

# proxychains4
#export PROXYCHAINS_SOCKS5=1080

# proxy
case ${MACHINE} in
x86_64)
    case ${HOSTNAME} in
    container*)
        # export HTTP_PROXY="http://172.17.0.1:8889/"
        export HTTP_PROXY="http://127.0.0.1:8889/"
        ;;
    *)
        export HTTP_PROXY="http://127.0.0.1:8889/"
        ;;
    esac
    ;;
aarch64)
    # not need proxy env, use clash
    ;;
esac
# microsoft wsl
if [[ ${KERNEL_RELEASE} == *"microsoft"* ]]
then
    hostip=$(cat /etc/resolv.conf | grep nameserver | awk '{ print $2 }')
    export HTTP_PROXY="http://${hostip}:8889"
    source ~/.nix-profile/etc/profile.d/nix.sh
fi
export HTTPS_PROXY="${HTTP_PROXY}"
export FTP_PROXY="${HTTP_PROXY}"
export http_proxy="${HTTP_PROXY}"
export https_proxy="${HTTP_PROXY}"
export ftp_proxy="${HTTP_PROXY}"

# alias
alias o="xdg-open"
alias a="broot \${HOME}/Documents/Config/autokey"
alias ll="ls --color -l"
alias ls="ls --color"
# nvim as manpager
## see nvim `:h :Man`
## nvim manpage huge mange is SLOW! E.g. man configuration.nix
alias nman="env MANPAGER='nvim +Man!' man"

# nixos obsidian
export NIXPKGS_ALLOW_INSECURE=1

# source my bashrc
if [[ -f ~/Gist/Config/bashrc ]]
then
    source ~/Gist/Config/bashrc
fi

# HSTR configuration - add this to ~/.bashrc
alias hh=hstr                    # hh to be alias for hstr
export HSTR_CONFIG=hicolor       # get more colors
shopt -s histappend              # append new history items to .bash_history
export HISTCONTROL=ignorespace   # leading space hides commands from history
export HISTFILESIZE=10000        # increase history file size (default is 500)
export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
# ensure synchronization between bash memory and history file
export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"
# if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi
# if this is interactive shell, then bind 'kill last command' to Ctrl-x k
if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi

# PROMPT_COMMAND tmux guard
# 1.
## Home-manager `programs.bash.enableVteIntegration` controls __vte_prompt_command.
## gnome-terminal.nix default enableVteIntegration.
## Therefore, home-manager will append __vte_prompt_command related commands to ~/.bashrc
# 2.
## __vte_prompt_command is not defined in tmux, while is defined in real terminal.
## hstr configuration make PROMPT_COMMAND will certainly contain __vte_prompt_command.
# 3.
## So I write these two dummy function to protect PROMPT_COMMAND.
## In real terminal, dummy __vte_prompt_command will be override by real one.
## In tmux, dummy dummy one prevents `__vte_prompt_command: command not found` error.
__hm_vte_prompt_command() {
    true
}
__vte_prompt_command() {
    true
}
